/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";
import * as z from "zod";

export class Clicks extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Retrieve the total clicks count
     *
     * @remarks
     * Retrieve the total number of clicks for a link, a domain, or the authenticated workspace.
     */
    async count(
        request?: operations.GetClicksCountRequest | undefined,
        options?: RequestOptions
    ): Promise<number> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetClicksCountRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/count")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getClicksCount",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<number>()
            .json(200, z.number())
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve timeseries click analytics
     *
     * @remarks
     * Retrieve timeseries click analytics for a link, a domain, or the authenticated workspace over a period of time.
     */
    async timeseries(
        request?: operations.GetTimeseriesByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<operations.ResponseBody>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTimeseriesByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/timeseries")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getTimeseriesByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<operations.ResponseBody>>()
            .json(200, z.array(operations.ResponseBody$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve top countries by clicks
     *
     * @remarks
     * Retrieve the top countries by number of clicks for a link, a domain, or the authenticated workspace.
     */
    async countries(
        request?: operations.GetCountriesByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<components.ClicksByCountry>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetCountriesByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/countries")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getCountriesByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<components.ClicksByCountry>>()
            .json(200, z.array(components.ClicksByCountry$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve top cities by clicks
     *
     * @remarks
     * Retrieve the top countries by number of clicks for a link, a domain, or the authenticated workspace.
     */
    async cities(
        request?: operations.GetCitiesByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<components.ClicksByCities>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetCitiesByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/cities")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getCitiesByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<components.ClicksByCities>>()
            .json(200, z.array(components.ClicksByCities$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve top devices by clicks
     *
     * @remarks
     * Retrieve the top devices by number of clicks for a link, a domain, or the authenticated workspace.
     */
    async devices(
        request?: operations.GetDevicesByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<operations.GetDevicesByClicksResponseBody>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetDevicesByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/devices")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getDevicesByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<operations.GetDevicesByClicksResponseBody>>()
            .json(200, z.array(operations.GetDevicesByClicksResponseBody$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve top browsers by clicks
     *
     * @remarks
     * Retrieve the top browsers by number of clicks for a link, a domain, or the authenticated workspace.
     */
    async browsers(
        request?: operations.GetBrowsersByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<operations.GetBrowsersByClicksResponseBody>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetBrowsersByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/browsers")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getBrowsersByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<operations.GetBrowsersByClicksResponseBody>>()
            .json(200, z.array(operations.GetBrowsersByClicksResponseBody$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve top OS by clicks
     *
     * @remarks
     * Retrieve the top OS by number of clicks for a link, a domain, or the authenticated workspace.
     */
    async os(
        request?: operations.GetOSByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<operations.GetOSByClicksResponseBody>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetOSByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/os")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getOSByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<operations.GetOSByClicksResponseBody>>()
            .json(200, z.array(operations.GetOSByClicksResponseBody$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve top referers by clicks
     *
     * @remarks
     * Retrieve the top referers by number of clicks for a link, a domain, or the authenticated workspace.
     */
    async referers(
        request?: operations.GetReferersByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<operations.GetReferersByClicksResponseBody>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetReferersByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/referers")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getReferersByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<operations.GetReferersByClicksResponseBody>>()
            .json(200, z.array(operations.GetReferersByClicksResponseBody$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve top links by clicks
     *
     * @remarks
     * Retrieve the top links by number of clicks for a domain or the authenticated workspace.
     */
    async topLinks(
        request?: operations.GetTopLinksByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<operations.GetTopLinksByClicksResponseBody>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTopLinksByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/top_links")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getTopLinksByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<operations.GetTopLinksByClicksResponseBody>>()
            .json(200, z.array(operations.GetTopLinksByClicksResponseBody$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve top URLs by clicks
     *
     * @remarks
     * Retrieve the top URLs by number of clicks for a given short link.
     */
    async topUrls(
        request?: operations.GetTopURLsByClicksRequest | undefined,
        options?: RequestOptions
    ): Promise<Array<operations.GetTopURLsByClicksResponseBody>> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTopURLsByClicksRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks/top_urls")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getTopURLsByClicks",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<Array<operations.GetTopURLsByClicksResponseBody>>()
            .json(200, z.array(operations.GetTopURLsByClicksResponseBody$.inboundSchema))
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve the total clicks count
     *
     * @remarks
     * Retrieve the total number of clicks for a link, a domain, or the authenticated workspace.
     *
     * @deprecated method: This method is deprecated. Use dub.analytics.clicks.count instead.. Use count instead.
     */
    async getClicksCountDeprecated(
        request?: operations.GetClicksCountDeprecatedRequest | undefined,
        options?: RequestOptions
    ): Promise<number> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetClicksCountDeprecatedRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/analytics/clicks")();

        const query$ = [
            enc$.encodeForm("browser", payload$.browser, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("city", payload$.city, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("country", payload$.country, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("device", payload$.device, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("domain", payload$.domain, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("end", payload$.end, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("externalId", payload$.externalId, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("interval", payload$.interval, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("linkId", payload$.linkId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("os", payload$.os, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("projectSlug", this.options$.projectSlug, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("qr", payload$.qr, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("referer", payload$.referer, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("root", payload$.root, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("start", payload$.start, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("tagId", payload$.tagId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("url", payload$.url, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("workspaceId", this.options$.workspaceId, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.token === "function") {
            security$ = { token: await this.options$.token() };
        } else if (this.options$.token) {
            security$ = { token: this.options$.token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getClicksCountDeprecated",
            oAuth2Scopes: [],
            securitySource: this.options$.token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: [
                "400",
                "401",
                "403",
                "404",
                "409",
                "410",
                "422",
                "429",
                "4XX",
                "500",
                "5XX",
            ],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<number>()
            .json(200, z.number())
            .json(400, errors.BadRequest$, { err: true })
            .json(401, errors.Unauthorized$, { err: true })
            .json(403, errors.Forbidden$, { err: true })
            .json(404, errors.NotFound$, { err: true })
            .json(409, errors.Conflict$, { err: true })
            .json(410, errors.InviteExpired$, { err: true })
            .json(422, errors.UnprocessableEntity$, { err: true })
            .json(429, errors.RateLimitExceeded$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.InternalServerError$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}

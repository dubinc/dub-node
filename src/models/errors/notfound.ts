/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * A short code indicating the error code returned.
 */
export const NotFoundCode = {
    NotFound: "not_found",
} as const;
/**
 * A short code indicating the error code returned.
 */
export type NotFoundCode = ClosedEnum<typeof NotFoundCode>;

export type NotFoundError = {
    /**
     * A short code indicating the error code returned.
     */
    code: NotFoundCode;
    /**
     * A human readable explanation of what went wrong.
     */
    message: string;
    /**
     * A link to our documentation with more details about this error code
     */
    docUrl?: string | undefined;
};

/**
 * The server cannot find the requested resource.
 */
export type NotFoundData = {
    error: NotFoundError;
};

/**
 * The server cannot find the requested resource.
 */
export class NotFound extends Error {
    error: NotFoundError;

    /** The original data that was passed to this error instance. */
    data$: NotFoundData;

    constructor(err: NotFoundData) {
        super("");
        this.data$ = err;

        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "NotFound";
    }
}

/** @internal */
export namespace NotFoundCode$ {
    export const inboundSchema: z.ZodNativeEnum<typeof NotFoundCode> = z.nativeEnum(NotFoundCode);
    export const outboundSchema: z.ZodNativeEnum<typeof NotFoundCode> = inboundSchema;
}

/** @internal */
export namespace NotFoundError$ {
    export const inboundSchema: z.ZodType<NotFoundError, z.ZodTypeDef, unknown> = z
        .object({
            code: NotFoundCode$.inboundSchema,
            message: z.string(),
            doc_url: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                doc_url: "docUrl",
            });
        });

    export type Outbound = {
        code: string;
        message: string;
        doc_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotFoundError> = z
        .object({
            code: NotFoundCode$.outboundSchema,
            message: z.string(),
            docUrl: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                docUrl: "doc_url",
            });
        });
}

/** @internal */
export namespace NotFound$ {
    export const inboundSchema: z.ZodType<NotFound, z.ZodTypeDef, unknown> = z
        .object({
            error: z.lazy(() => NotFoundError$.inboundSchema),
        })
        .transform((v) => {
            return new NotFound(v);
        });

    export type Outbound = {
        error: NotFoundError$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotFound> = z
        .instanceof(NotFound)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                error: z.lazy(() => NotFoundError$.outboundSchema),
            })
        );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TransferDomainRequestBody = {
    /**
     * The ID of the new workspace to transfer the domain to.
     */
    newWorkspaceId: string;
};

export type TransferDomainRequest = {
    /**
     * The domain name.
     */
    slug: string;
    requestBody?: TransferDomainRequestBody | undefined;
};

/** @internal */
export namespace TransferDomainRequestBody$ {
    export type Inbound = {
        newWorkspaceId: string;
    };

    export const inboundSchema: z.ZodType<TransferDomainRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            newWorkspaceId: z.string(),
        })
        .transform((v) => {
            return {
                newWorkspaceId: v.newWorkspaceId,
            };
        });

    export type Outbound = {
        newWorkspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainRequestBody> = z
        .object({
            newWorkspaceId: z.string(),
        })
        .transform((v) => {
            return {
                newWorkspaceId: v.newWorkspaceId,
            };
        });
}

/** @internal */
export namespace TransferDomainRequest$ {
    export type Inbound = {
        slug: string;
        RequestBody?: TransferDomainRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransferDomainRequest, z.ZodTypeDef, Inbound> = z
        .object({
            slug: z.string(),
            RequestBody: z.lazy(() => TransferDomainRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        slug: string;
        RequestBody?: TransferDomainRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainRequest> = z
        .object({
            slug: z.string(),
            requestBody: z.lazy(() => TransferDomainRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

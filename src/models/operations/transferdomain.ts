/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TransferDomainRequestBody = {
    /**
     * The ID of the new workspace to transfer the domain to.
     */
    newWorkspaceId: string;
};

export type TransferDomainRequest = {
    /**
     * The domain name.
     */
    slug: string;
    requestBody?: TransferDomainRequestBody | undefined;
};

/**
 * The type of redirect to use for this domain.
 */
export const TransferDomainType = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;
/**
 * The type of redirect to use for this domain.
 */
export type TransferDomainType = (typeof TransferDomainType)[keyof typeof TransferDomainType];

/**
 * The domain transfer initiated
 */
export type TransferDomainResponseBody = {
    /**
     * The domain name.
     */
    slug: string;
    /**
     * Whether the domain is verified.
     */
    verified?: boolean | undefined;
    /**
     * Whether the domain is the primary domain for the workspace.
     */
    primary?: boolean | undefined;
    /**
     * Whether the domain is archived.
     */
    archived?: boolean | undefined;
    /**
     * Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened.
     */
    placeholder?: string | undefined;
    /**
     * The URL to redirect to when a link under this domain has expired.
     */
    expiredUrl: string | null;
    /**
     * The page your users will get redirected to when they visit your domain.
     */
    target: string | null;
    /**
     * The type of redirect to use for this domain.
     */
    type: TransferDomainType;
    /**
     * The number of clicks on the domain.
     */
    clicks?: number | undefined;
};

/** @internal */
export namespace TransferDomainRequestBody$ {
    export type Inbound = {
        newWorkspaceId: string;
    };

    export const inboundSchema: z.ZodType<TransferDomainRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            newWorkspaceId: z.string(),
        })
        .transform((v) => {
            return {
                newWorkspaceId: v.newWorkspaceId,
            };
        });

    export type Outbound = {
        newWorkspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainRequestBody> = z
        .object({
            newWorkspaceId: z.string(),
        })
        .transform((v) => {
            return {
                newWorkspaceId: v.newWorkspaceId,
            };
        });
}

/** @internal */
export namespace TransferDomainRequest$ {
    export type Inbound = {
        slug: string;
        RequestBody?: TransferDomainRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransferDomainRequest, z.ZodTypeDef, Inbound> = z
        .object({
            slug: z.string(),
            RequestBody: z.lazy(() => TransferDomainRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        slug: string;
        RequestBody?: TransferDomainRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainRequest> = z
        .object({
            slug: z.string(),
            requestBody: z.lazy(() => TransferDomainRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export const TransferDomainType$ = z.nativeEnum(TransferDomainType);

/** @internal */
export namespace TransferDomainResponseBody$ {
    export type Inbound = {
        slug: string;
        verified?: boolean | undefined;
        primary?: boolean | undefined;
        archived?: boolean | undefined;
        placeholder?: string | undefined;
        expiredUrl: string | null;
        target: string | null;
        type: TransferDomainType;
        clicks?: number | undefined;
    };

    export const inboundSchema: z.ZodType<TransferDomainResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            slug: z.string(),
            verified: z.boolean().default(false),
            primary: z.boolean().default(false),
            archived: z.boolean().default(false),
            placeholder: z.string().default("https://dub.co/help/article/what-is-dub"),
            expiredUrl: z.nullable(z.string()),
            target: z.nullable(z.string()),
            type: TransferDomainType$,
            clicks: z.number().default(0),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                verified: v.verified,
                primary: v.primary,
                archived: v.archived,
                placeholder: v.placeholder,
                expiredUrl: v.expiredUrl,
                target: v.target,
                type: v.type,
                clicks: v.clicks,
            };
        });

    export type Outbound = {
        slug: string;
        verified: boolean;
        primary: boolean;
        archived: boolean;
        placeholder: string;
        expiredUrl: string | null;
        target: string | null;
        type: TransferDomainType;
        clicks: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainResponseBody> = z
        .object({
            slug: z.string(),
            verified: z.boolean().default(false),
            primary: z.boolean().default(false),
            archived: z.boolean().default(false),
            placeholder: z.string().default("https://dub.co/help/article/what-is-dub"),
            expiredUrl: z.nullable(z.string()),
            target: z.nullable(z.string()),
            type: TransferDomainType$,
            clicks: z.number().default(0),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                verified: v.verified,
                primary: v.primary,
                archived: v.archived,
                placeholder: v.placeholder,
                expiredUrl: v.expiredUrl,
                target: v.target,
                type: v.type,
                clicks: v.clicks,
            };
        });
}

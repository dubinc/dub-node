/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type TransferDomainGlobals = {
    workspaceId: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectSlug?: string | undefined;
};

export type TransferDomainRequestBody = {
    /**
     * The ID of the new workspace to transfer the domain to.
     */
    newWorkspaceId: string;
};

export type TransferDomainRequest = {
    /**
     * The domain name.
     */
    slug: string;
    requestBody?: TransferDomainRequestBody | undefined;
};

/** @internal */
export namespace TransferDomainGlobals$ {
    export const inboundSchema: z.ZodType<TransferDomainGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string(),
        projectSlug: z.string().optional(),
    });

    export type Outbound = {
        workspaceId: string;
        projectSlug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainGlobals> =
        z.object({
            workspaceId: z.string(),
            projectSlug: z.string().optional(),
        });
}

/** @internal */
export namespace TransferDomainRequestBody$ {
    export const inboundSchema: z.ZodType<TransferDomainRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            newWorkspaceId: z.string(),
        });

    export type Outbound = {
        newWorkspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainRequestBody> =
        z.object({
            newWorkspaceId: z.string(),
        });
}

/** @internal */
export namespace TransferDomainRequest$ {
    export const inboundSchema: z.ZodType<TransferDomainRequest, z.ZodTypeDef, unknown> = z
        .object({
            slug: z.string(),
            RequestBody: z.lazy(() => TransferDomainRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        slug: string;
        RequestBody?: TransferDomainRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainRequest> = z
        .object({
            slug: z.string(),
            requestBody: z.lazy(() => TransferDomainRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TransferDomainGlobals = {
    workspaceId: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectSlug?: string | undefined;
};

export type TransferDomainRequestBody = {
    /**
     * The ID of the new workspace to transfer the domain to.
     */
    newWorkspaceId: string;
};

export type TransferDomainRequest = {
    /**
     * The domain name.
     */
    slug: string;
    requestBody?: TransferDomainRequestBody | undefined;
};

/** @internal */
export namespace TransferDomainGlobals$ {
    export const inboundSchema: z.ZodType<TransferDomainGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string(),
            projectSlug: z.string().optional(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
                ...(v.projectSlug === undefined ? null : { projectSlug: v.projectSlug }),
            };
        });

    export type Outbound = {
        workspaceId: string;
        projectSlug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainGlobals> = z
        .object({
            workspaceId: z.string(),
            projectSlug: z.string().optional(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
                ...(v.projectSlug === undefined ? null : { projectSlug: v.projectSlug }),
            };
        });
}

/** @internal */
export namespace TransferDomainRequestBody$ {
    export const inboundSchema: z.ZodType<TransferDomainRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            newWorkspaceId: z.string(),
        })
        .transform((v) => {
            return {
                newWorkspaceId: v.newWorkspaceId,
            };
        });

    export type Outbound = {
        newWorkspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainRequestBody> = z
        .object({
            newWorkspaceId: z.string(),
        })
        .transform((v) => {
            return {
                newWorkspaceId: v.newWorkspaceId,
            };
        });
}

/** @internal */
export namespace TransferDomainRequest$ {
    export const inboundSchema: z.ZodType<TransferDomainRequest, z.ZodTypeDef, unknown> = z
        .object({
            slug: z.string(),
            RequestBody: z.lazy(() => TransferDomainRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        slug: string;
        RequestBody?: TransferDomainRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferDomainRequest> = z
        .object({
            slug: z.string(),
            requestBody: z.lazy(() => TransferDomainRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

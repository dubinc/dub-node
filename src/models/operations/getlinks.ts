/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetLinksGlobals = {
    workspaceId?: string | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectSlug?: string | undefined;
};

/**
 * The tag IDs to filter the links by.
 */
export type QueryParamTagIds = string | Array<string>;

/**
 * The unique name of the tags assigned to the short link (case insensitive).
 */
export type QueryParamTagNames = string | Array<string>;

/**
 * The field to sort the links by. The default is `createdAt`, and sort order is always descending.
 */
export const Sort = {
    CreatedAt: "createdAt",
    Clicks: "clicks",
    LastClicked: "lastClicked",
} as const;
/**
 * The field to sort the links by. The default is `createdAt`, and sort order is always descending.
 */
export type Sort = ClosedEnum<typeof Sort>;

export type GetLinksRequest = {
    /**
     * The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned.
     */
    domain?: string | undefined;
    /**
     * The tag ID to filter the links by. This field is deprecated â€“ use `tagIds` instead.
     */
    tagId?: string | undefined;
    /**
     * The tag IDs to filter the links by.
     */
    tagIds?: string | Array<string> | undefined;
    /**
     * The unique name of the tags assigned to the short link (case insensitive).
     */
    tagNames?: string | Array<string> | undefined;
    /**
     * The search term to filter the links by. The search term will be matched against the short link slug and the destination url.
     */
    search?: string | undefined;
    /**
     * The user ID to filter the links by.
     */
    userId?: string | undefined;
    /**
     * Whether to include archived links in the response. Defaults to `false` if not provided.
     */
    showArchived?: boolean | undefined;
    /**
     * Whether to include tags in the response. Defaults to `false` if not provided.
     */
    withTags?: boolean | undefined;
    /**
     * The field to sort the links by. The default is `createdAt`, and sort order is always descending.
     */
    sort?: Sort | undefined;
    /**
     * The page number for pagination (each page contains 100 links).
     */
    page?: number | undefined;
};

/** @internal */
export namespace GetLinksGlobals$ {
    export const inboundSchema: z.ZodType<GetLinksGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string().optional(),
        projectSlug: z.string().optional(),
    });

    export type Outbound = {
        workspaceId?: string | undefined;
        projectSlug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLinksGlobals> = z.object({
        workspaceId: z.string().optional(),
        projectSlug: z.string().optional(),
    });
}

/** @internal */
export namespace QueryParamTagIds$ {
    export const inboundSchema: z.ZodType<QueryParamTagIds, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(z.string()),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueryParamTagIds> = z.union([
        z.string(),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace QueryParamTagNames$ {
    export const inboundSchema: z.ZodType<QueryParamTagNames, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(z.string()),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueryParamTagNames> = z.union([
        z.string(),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace Sort$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Sort> = z.nativeEnum(Sort);
    export const outboundSchema: z.ZodNativeEnum<typeof Sort> = inboundSchema;
}

/** @internal */
export namespace GetLinksRequest$ {
    export const inboundSchema: z.ZodType<GetLinksRequest, z.ZodTypeDef, unknown> = z.object({
        domain: z.string().optional(),
        tagId: z.string().optional(),
        tagIds: z.union([z.string(), z.array(z.string())]).optional(),
        tagNames: z.union([z.string(), z.array(z.string())]).optional(),
        search: z.string().optional(),
        userId: z.string().optional(),
        showArchived: z.boolean().default(false),
        withTags: z.boolean().default(false),
        sort: Sort$.inboundSchema.default("createdAt"),
        page: z.number().optional(),
    });

    export type Outbound = {
        domain?: string | undefined;
        tagId?: string | undefined;
        tagIds?: string | Array<string> | undefined;
        tagNames?: string | Array<string> | undefined;
        search?: string | undefined;
        userId?: string | undefined;
        showArchived: boolean;
        withTags: boolean;
        sort: string;
        page?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLinksRequest> = z.object({
        domain: z.string().optional(),
        tagId: z.string().optional(),
        tagIds: z.union([z.string(), z.array(z.string())]).optional(),
        tagNames: z.union([z.string(), z.array(z.string())]).optional(),
        search: z.string().optional(),
        userId: z.string().optional(),
        showArchived: z.boolean().default(false),
        withTags: z.boolean().default(false),
        sort: Sort$.outboundSchema.default("createdAt"),
        page: z.number().optional(),
    });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ListDomainsRequest = {};

/**
 * The type of redirect to use for this domain.
 */
export const ListDomainsType = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;
/**
 * The type of redirect to use for this domain.
 */
export type ListDomainsType = (typeof ListDomainsType)[keyof typeof ListDomainsType];

export type ListDomainsResponseBody = {
    /**
     * The domain name.
     */
    slug: string;
    /**
     * Whether the domain is verified.
     */
    verified?: boolean | undefined;
    /**
     * Whether the domain is the primary domain for the workspace.
     */
    primary?: boolean | undefined;
    /**
     * Whether the domain is archived.
     */
    archived?: boolean | undefined;
    /**
     * Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened.
     */
    placeholder?: string | undefined;
    /**
     * The URL to redirect to when a link under this domain has expired.
     */
    expiredUrl: string | null;
    /**
     * The page your users will get redirected to when they visit your domain.
     */
    target: string | null;
    /**
     * The type of redirect to use for this domain.
     */
    type: ListDomainsType;
    /**
     * The number of clicks on the domain.
     */
    clicks?: number | undefined;
};

export type ListDomainsResponse =
    | components.BadRequest
    | components.Unauthorized
    | components.Forbidden
    | components.NotFound
    | components.Conflict
    | components.InviteExpired
    | components.UnprocessableEntity
    | components.RateLimitExceeded
    | components.InternalServerError
    | Array<ListDomainsResponseBody>;

/** @internal */
export namespace ListDomainsRequest$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<ListDomainsRequest, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDomainsRequest> = z.object(
        {}
    );
}

/** @internal */
export const ListDomainsType$: z.ZodNativeEnum<typeof ListDomainsType> =
    z.nativeEnum(ListDomainsType);

/** @internal */
export namespace ListDomainsResponseBody$ {
    export type Inbound = {
        slug: string;
        verified?: boolean | undefined;
        primary?: boolean | undefined;
        archived?: boolean | undefined;
        placeholder?: string | undefined;
        expiredUrl: string | null;
        target: string | null;
        type: ListDomainsType;
        clicks?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ListDomainsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            slug: z.string(),
            verified: z.boolean().default(false),
            primary: z.boolean().default(false),
            archived: z.boolean().default(false),
            placeholder: z.string().default("https://dub.co/help/article/what-is-dub"),
            expiredUrl: z.nullable(z.string()),
            target: z.nullable(z.string()),
            type: ListDomainsType$,
            clicks: z.number().default(0),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                verified: v.verified,
                primary: v.primary,
                archived: v.archived,
                placeholder: v.placeholder,
                expiredUrl: v.expiredUrl,
                target: v.target,
                type: v.type,
                clicks: v.clicks,
            };
        });

    export type Outbound = {
        slug: string;
        verified: boolean;
        primary: boolean;
        archived: boolean;
        placeholder: string;
        expiredUrl: string | null;
        target: string | null;
        type: ListDomainsType;
        clicks: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDomainsResponseBody> = z
        .object({
            slug: z.string(),
            verified: z.boolean().default(false),
            primary: z.boolean().default(false),
            archived: z.boolean().default(false),
            placeholder: z.string().default("https://dub.co/help/article/what-is-dub"),
            expiredUrl: z.nullable(z.string()),
            target: z.nullable(z.string()),
            type: ListDomainsType$,
            clicks: z.number().default(0),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                verified: v.verified,
                primary: v.primary,
                archived: v.archived,
                placeholder: v.placeholder,
                expiredUrl: v.expiredUrl,
                target: v.target,
                type: v.type,
                clicks: v.clicks,
            };
        });
}

/** @internal */
export namespace ListDomainsResponse$ {
    export type Inbound =
        | components.BadRequest$.Inbound
        | components.Unauthorized$.Inbound
        | components.Forbidden$.Inbound
        | components.NotFound$.Inbound
        | components.Conflict$.Inbound
        | components.InviteExpired$.Inbound
        | components.UnprocessableEntity$.Inbound
        | components.RateLimitExceeded$.Inbound
        | components.InternalServerError$.Inbound
        | Array<ListDomainsResponseBody$.Inbound>;

    export type Outbound =
        | components.BadRequest$.Outbound
        | components.Unauthorized$.Outbound
        | components.Forbidden$.Outbound
        | components.NotFound$.Outbound
        | components.Conflict$.Outbound
        | components.InviteExpired$.Outbound
        | components.UnprocessableEntity$.Outbound
        | components.RateLimitExceeded$.Outbound
        | components.InternalServerError$.Outbound
        | Array<ListDomainsResponseBody$.Outbound>;
    export const inboundSchema: z.ZodType<ListDomainsResponse, z.ZodTypeDef, Inbound> = z.union([
        components.BadRequest$.inboundSchema,
        components.Unauthorized$.inboundSchema,
        components.Forbidden$.inboundSchema,
        components.NotFound$.inboundSchema,
        components.Conflict$.inboundSchema,
        components.InviteExpired$.inboundSchema,
        components.UnprocessableEntity$.inboundSchema,
        components.RateLimitExceeded$.inboundSchema,
        components.InternalServerError$.inboundSchema,
        z.array(z.lazy(() => ListDomainsResponseBody$.inboundSchema)),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDomainsResponse> = z.union([
        components.BadRequest$.outboundSchema,
        components.Unauthorized$.outboundSchema,
        components.Forbidden$.outboundSchema,
        components.NotFound$.outboundSchema,
        components.Conflict$.outboundSchema,
        components.InviteExpired$.outboundSchema,
        components.UnprocessableEntity$.outboundSchema,
        components.RateLimitExceeded$.outboundSchema,
        components.InternalServerError$.outboundSchema,
        z.array(z.lazy(() => ListDomainsResponseBody$.outboundSchema)),
    ]);
}

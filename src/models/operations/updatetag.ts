/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type UpdateTagGlobals = {
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    workspaceId?: string | undefined;
};

/**
 * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
 */
export const UpdateTagColor = {
    Red: "red",
    Yellow: "yellow",
    Green: "green",
    Blue: "blue",
    Purple: "purple",
    Pink: "pink",
    Brown: "brown",
} as const;
/**
 * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
 */
export type UpdateTagColor = ClosedEnum<typeof UpdateTagColor>;

export type UpdateTagRequestBody = {
    /**
     * The name of the tag to create.
     */
    name?: string | undefined;
    /**
     * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
     */
    color?: UpdateTagColor | undefined;
    /**
     * The name of the tag to create.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    tag?: string | undefined;
};

export type UpdateTagRequest = {
    /**
     * The ID of the tag
     */
    id: string;
    requestBody?: UpdateTagRequestBody | undefined;
};

/** @internal */
export namespace UpdateTagGlobals$ {
    export const inboundSchema: z.ZodType<UpdateTagGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string().optional(),
    });

    export type Outbound = {
        workspaceId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTagGlobals> = z.object({
        workspaceId: z.string().optional(),
    });
}

/** @internal */
export namespace UpdateTagColor$ {
    export const inboundSchema: z.ZodNativeEnum<typeof UpdateTagColor> =
        z.nativeEnum(UpdateTagColor);
    export const outboundSchema: z.ZodNativeEnum<typeof UpdateTagColor> = inboundSchema;
}

/** @internal */
export namespace UpdateTagRequestBody$ {
    export const inboundSchema: z.ZodType<UpdateTagRequestBody, z.ZodTypeDef, unknown> = z.object({
        name: z.string().optional(),
        color: UpdateTagColor$.inboundSchema.optional(),
        tag: z.string().optional(),
    });

    export type Outbound = {
        name?: string | undefined;
        color?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTagRequestBody> = z.object(
        {
            name: z.string().optional(),
            color: UpdateTagColor$.outboundSchema.optional(),
            tag: z.string().optional(),
        }
    );
}

/** @internal */
export namespace UpdateTagRequest$ {
    export const inboundSchema: z.ZodType<UpdateTagRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            RequestBody: z.lazy(() => UpdateTagRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        id: string;
        RequestBody?: UpdateTagRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTagRequest> = z
        .object({
            id: z.string(),
            requestBody: z.lazy(() => UpdateTagRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

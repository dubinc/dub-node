/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type CreateWorkspaceSecurity = {
    token?: string | undefined;
};

export type CreateWorkspaceRequestBody = {
    name: string;
    slug: string;
    domain?: string | undefined;
};

/** @internal */
export namespace CreateWorkspaceSecurity$ {
    export type Inbound = {
        token?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateWorkspaceSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            token: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });

    export type Outbound = {
        token?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateWorkspaceSecurity> = z
        .object({
            token: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });
}

/** @internal */
export namespace CreateWorkspaceRequestBody$ {
    export type Inbound = {
        name: string;
        slug: string;
        domain?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateWorkspaceRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            slug: z.string(),
            domain: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                slug: v.slug,
                ...(v.domain === undefined ? null : { domain: v.domain }),
            };
        });

    export type Outbound = {
        name: string;
        slug: string;
        domain?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateWorkspaceRequestBody> = z
        .object({
            name: z.string(),
            slug: z.string(),
            domain: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                slug: v.slug,
                ...(v.domain === undefined ? null : { domain: v.domain }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateWorkspaceRequestBody = {
    name: string;
    slug: string;
    domain?: string | undefined;
};

export type CreateWorkspaceResponse =
    | components.BadRequest
    | components.Unauthorized
    | components.Forbidden
    | components.NotFound
    | components.Conflict
    | components.InviteExpired
    | components.UnprocessableEntity
    | components.RateLimitExceeded
    | components.InternalServerError
    | components.WorkspaceSchema;

/** @internal */
export namespace CreateWorkspaceRequestBody$ {
    export type Inbound = {
        name: string;
        slug: string;
        domain?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateWorkspaceRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            slug: z.string(),
            domain: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                slug: v.slug,
                ...(v.domain === undefined ? null : { domain: v.domain }),
            };
        });

    export type Outbound = {
        name: string;
        slug: string;
        domain?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateWorkspaceRequestBody> = z
        .object({
            name: z.string(),
            slug: z.string(),
            domain: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                slug: v.slug,
                ...(v.domain === undefined ? null : { domain: v.domain }),
            };
        });
}

/** @internal */
export namespace CreateWorkspaceResponse$ {
    export type Inbound =
        | components.BadRequest$.Inbound
        | components.Unauthorized$.Inbound
        | components.Forbidden$.Inbound
        | components.NotFound$.Inbound
        | components.Conflict$.Inbound
        | components.InviteExpired$.Inbound
        | components.UnprocessableEntity$.Inbound
        | components.RateLimitExceeded$.Inbound
        | components.InternalServerError$.Inbound
        | components.WorkspaceSchema$.Inbound;

    export type Outbound =
        | components.BadRequest$.Outbound
        | components.Unauthorized$.Outbound
        | components.Forbidden$.Outbound
        | components.NotFound$.Outbound
        | components.Conflict$.Outbound
        | components.InviteExpired$.Outbound
        | components.UnprocessableEntity$.Outbound
        | components.RateLimitExceeded$.Outbound
        | components.InternalServerError$.Outbound
        | components.WorkspaceSchema$.Outbound;
    export const inboundSchema: z.ZodType<CreateWorkspaceResponse, z.ZodTypeDef, Inbound> = z.union(
        [
            components.BadRequest$.inboundSchema,
            components.Unauthorized$.inboundSchema,
            components.Forbidden$.inboundSchema,
            components.NotFound$.inboundSchema,
            components.Conflict$.inboundSchema,
            components.InviteExpired$.inboundSchema,
            components.UnprocessableEntity$.inboundSchema,
            components.RateLimitExceeded$.inboundSchema,
            components.InternalServerError$.inboundSchema,
            components.WorkspaceSchema$.inboundSchema,
        ]
    );
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateWorkspaceResponse> =
        z.union([
            components.BadRequest$.outboundSchema,
            components.Unauthorized$.outboundSchema,
            components.Forbidden$.outboundSchema,
            components.NotFound$.outboundSchema,
            components.Conflict$.outboundSchema,
            components.InviteExpired$.outboundSchema,
            components.UnprocessableEntity$.outboundSchema,
            components.RateLimitExceeded$.outboundSchema,
            components.InternalServerError$.outboundSchema,
            components.WorkspaceSchema$.outboundSchema,
        ]);
}

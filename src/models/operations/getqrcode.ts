/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The level of error correction to use for the QR code. Defaults to `L` if not provided.
 */
export const Level = {
    L: "L",
    M: "M",
    Q: "Q",
    H: "H",
} as const;
/**
 * The level of error correction to use for the QR code. Defaults to `L` if not provided.
 */
export type Level = (typeof Level)[keyof typeof Level];

export type GetQRCodeRequest = {
    /**
     * The URL to generate a QR code for. Defaults to `https://dub.co` if not provided.
     */
    url?: string | undefined;
    /**
     * The size of the QR code in pixels. Defaults to `600` if not provided.
     */
    size?: number | undefined;
    /**
     * The level of error correction to use for the QR code. Defaults to `L` if not provided.
     */
    level?: Level | undefined;
    /**
     * The foreground color of the QR code in hex format. Defaults to `#000000` if not provided.
     */
    fgColor?: string | undefined;
    /**
     * The background color of the QR code in hex format. Defaults to `#ffffff` if not provided.
     */
    bgColor?: string | undefined;
    /**
     * Whether to include a margin around the QR code. Defaults to `false` if not provided.
     */
    includeMargin?: boolean | undefined;
};

export type GetQRCodeResponse =
    | components.BadRequest
    | components.Unauthorized
    | components.Forbidden
    | components.NotFound
    | components.Conflict
    | components.InviteExpired
    | components.UnprocessableEntity
    | components.RateLimitExceeded
    | components.InternalServerError
    | string;

/** @internal */
export const Level$: z.ZodNativeEnum<typeof Level> = z.nativeEnum(Level);

/** @internal */
export namespace GetQRCodeRequest$ {
    export type Inbound = {
        url?: string | undefined;
        size?: number | undefined;
        level?: Level | undefined;
        fgColor?: string | undefined;
        bgColor?: string | undefined;
        includeMargin?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetQRCodeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().default("https://dub.co"),
            size: z.number().default(600),
            level: Level$.default("L"),
            fgColor: z.string().default("#000000"),
            bgColor: z.string().default("#FFFFFF"),
            includeMargin: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                url: v.url,
                size: v.size,
                level: v.level,
                fgColor: v.fgColor,
                bgColor: v.bgColor,
                includeMargin: v.includeMargin,
            };
        });

    export type Outbound = {
        url: string;
        size: number;
        level: Level;
        fgColor: string;
        bgColor: string;
        includeMargin: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetQRCodeRequest> = z
        .object({
            url: z.string().default("https://dub.co"),
            size: z.number().default(600),
            level: Level$.default("L"),
            fgColor: z.string().default("#000000"),
            bgColor: z.string().default("#FFFFFF"),
            includeMargin: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                url: v.url,
                size: v.size,
                level: v.level,
                fgColor: v.fgColor,
                bgColor: v.bgColor,
                includeMargin: v.includeMargin,
            };
        });
}

/** @internal */
export namespace GetQRCodeResponse$ {
    export type Inbound =
        | components.BadRequest$.Inbound
        | components.Unauthorized$.Inbound
        | components.Forbidden$.Inbound
        | components.NotFound$.Inbound
        | components.Conflict$.Inbound
        | components.InviteExpired$.Inbound
        | components.UnprocessableEntity$.Inbound
        | components.RateLimitExceeded$.Inbound
        | components.InternalServerError$.Inbound
        | string;

    export type Outbound =
        | components.BadRequest$.Outbound
        | components.Unauthorized$.Outbound
        | components.Forbidden$.Outbound
        | components.NotFound$.Outbound
        | components.Conflict$.Outbound
        | components.InviteExpired$.Outbound
        | components.UnprocessableEntity$.Outbound
        | components.RateLimitExceeded$.Outbound
        | components.InternalServerError$.Outbound
        | string;
    export const inboundSchema: z.ZodType<GetQRCodeResponse, z.ZodTypeDef, Inbound> = z.union([
        components.BadRequest$.inboundSchema,
        components.Unauthorized$.inboundSchema,
        components.Forbidden$.inboundSchema,
        components.NotFound$.inboundSchema,
        components.Conflict$.inboundSchema,
        components.InviteExpired$.inboundSchema,
        components.UnprocessableEntity$.inboundSchema,
        components.RateLimitExceeded$.inboundSchema,
        components.InternalServerError$.inboundSchema,
        z.string(),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetQRCodeResponse> = z.union([
        components.BadRequest$.outboundSchema,
        components.Unauthorized$.outboundSchema,
        components.Forbidden$.outboundSchema,
        components.NotFound$.outboundSchema,
        components.Conflict$.outboundSchema,
        components.InviteExpired$.outboundSchema,
        components.UnprocessableEntity$.outboundSchema,
        components.RateLimitExceeded$.outboundSchema,
        components.InternalServerError$.outboundSchema,
        z.string(),
    ]);
}

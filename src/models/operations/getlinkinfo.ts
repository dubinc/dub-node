/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetLinkInfoRequest = {
    domain: string;
    /**
     * The key of the link to retrieve. E.g. for `d.to/github`, the key is `github`.
     */
    key: string;
};

export type GetLinkInfoResponse =
    | components.BadRequest
    | components.Unauthorized
    | components.Forbidden
    | components.NotFound
    | components.Conflict
    | components.InviteExpired
    | components.UnprocessableEntity
    | components.RateLimitExceeded
    | components.InternalServerError
    | components.LinkSchema;

/** @internal */
export namespace GetLinkInfoRequest$ {
    export type Inbound = {
        domain: string;
        key: string;
    };

    export const inboundSchema: z.ZodType<GetLinkInfoRequest, z.ZodTypeDef, Inbound> = z
        .object({
            domain: z.string(),
            key: z.string(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                key: v.key,
            };
        });

    export type Outbound = {
        domain: string;
        key: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLinkInfoRequest> = z
        .object({
            domain: z.string(),
            key: z.string(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                key: v.key,
            };
        });
}

/** @internal */
export namespace GetLinkInfoResponse$ {
    export type Inbound =
        | components.BadRequest$.Inbound
        | components.Unauthorized$.Inbound
        | components.Forbidden$.Inbound
        | components.NotFound$.Inbound
        | components.Conflict$.Inbound
        | components.InviteExpired$.Inbound
        | components.UnprocessableEntity$.Inbound
        | components.RateLimitExceeded$.Inbound
        | components.InternalServerError$.Inbound
        | components.LinkSchema$.Inbound;

    export type Outbound =
        | components.BadRequest$.Outbound
        | components.Unauthorized$.Outbound
        | components.Forbidden$.Outbound
        | components.NotFound$.Outbound
        | components.Conflict$.Outbound
        | components.InviteExpired$.Outbound
        | components.UnprocessableEntity$.Outbound
        | components.RateLimitExceeded$.Outbound
        | components.InternalServerError$.Outbound
        | components.LinkSchema$.Outbound;
    export const inboundSchema: z.ZodType<GetLinkInfoResponse, z.ZodTypeDef, Inbound> = z.union([
        components.BadRequest$.inboundSchema,
        components.Unauthorized$.inboundSchema,
        components.Forbidden$.inboundSchema,
        components.NotFound$.inboundSchema,
        components.Conflict$.inboundSchema,
        components.InviteExpired$.inboundSchema,
        components.UnprocessableEntity$.inboundSchema,
        components.RateLimitExceeded$.inboundSchema,
        components.InternalServerError$.inboundSchema,
        components.LinkSchema$.inboundSchema,
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLinkInfoResponse> = z.union([
        components.BadRequest$.outboundSchema,
        components.Unauthorized$.outboundSchema,
        components.Forbidden$.outboundSchema,
        components.NotFound$.outboundSchema,
        components.Conflict$.outboundSchema,
        components.InviteExpired$.outboundSchema,
        components.UnprocessableEntity$.outboundSchema,
        components.RateLimitExceeded$.outboundSchema,
        components.InternalServerError$.outboundSchema,
        components.LinkSchema$.outboundSchema,
    ]);
}

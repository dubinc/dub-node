/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of redirect to use for this domain.
 */
export const EditDomainType = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;
/**
 * The type of redirect to use for this domain.
 */
export type EditDomainType = (typeof EditDomainType)[keyof typeof EditDomainType];

export type EditDomainRequestBody = {
    /**
     * Name of the domain.
     */
    slug?: string | undefined;
    /**
     * The type of redirect to use for this domain.
     */
    type?: EditDomainType | undefined;
    /**
     * The page your users will get redirected to when they visit your domain.
     */
    target?: string | null | undefined;
    /**
     * Redirect users to a specific URL when any link under this domain has expired.
     */
    expiredUrl?: string | null | undefined;
    /**
     * Whether to archive this domain. `false` will unarchive a previously archived domain.
     */
    archived?: boolean | undefined;
    /**
     * Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened.
     */
    placeholder?: string | null | undefined;
};

export type EditDomainRequest = {
    /**
     * The domain name.
     */
    slug: string;
    requestBody?: EditDomainRequestBody | undefined;
};

/** @internal */
export const EditDomainType$: z.ZodNativeEnum<typeof EditDomainType> = z.nativeEnum(EditDomainType);

/** @internal */
export namespace EditDomainRequestBody$ {
    export type Inbound = {
        slug?: string | undefined;
        type?: EditDomainType | undefined;
        target?: string | null | undefined;
        expiredUrl?: string | null | undefined;
        archived?: boolean | undefined;
        placeholder?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<EditDomainRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            slug: z.string().optional(),
            type: EditDomainType$.default("redirect"),
            target: z.nullable(z.string()).optional(),
            expiredUrl: z.nullable(z.string()).optional(),
            archived: z.boolean().default(false),
            placeholder: z.nullable(z.string().default("https://dub.co/help/article/what-is-dub")),
        })
        .transform((v) => {
            return {
                ...(v.slug === undefined ? null : { slug: v.slug }),
                type: v.type,
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.expiredUrl === undefined ? null : { expiredUrl: v.expiredUrl }),
                archived: v.archived,
                placeholder: v.placeholder,
            };
        });

    export type Outbound = {
        slug?: string | undefined;
        type: EditDomainType;
        target?: string | null | undefined;
        expiredUrl?: string | null | undefined;
        archived: boolean;
        placeholder: string | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EditDomainRequestBody> = z
        .object({
            slug: z.string().optional(),
            type: EditDomainType$.default("redirect"),
            target: z.nullable(z.string()).optional(),
            expiredUrl: z.nullable(z.string()).optional(),
            archived: z.boolean().default(false),
            placeholder: z.nullable(z.string().default("https://dub.co/help/article/what-is-dub")),
        })
        .transform((v) => {
            return {
                ...(v.slug === undefined ? null : { slug: v.slug }),
                type: v.type,
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.expiredUrl === undefined ? null : { expiredUrl: v.expiredUrl }),
                archived: v.archived,
                placeholder: v.placeholder,
            };
        });
}

/** @internal */
export namespace EditDomainRequest$ {
    export type Inbound = {
        slug: string;
        RequestBody?: EditDomainRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<EditDomainRequest, z.ZodTypeDef, Inbound> = z
        .object({
            slug: z.string(),
            RequestBody: z.lazy(() => EditDomainRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        slug: string;
        RequestBody?: EditDomainRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EditDomainRequest> = z
        .object({
            slug: z.string(),
            requestBody: z.lazy(() => EditDomainRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

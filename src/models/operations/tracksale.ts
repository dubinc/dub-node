/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

export type TrackSaleGlobals = {
    workspaceId: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectSlug?: string | undefined;
};

/**
 * The payment processor via which the sale was made.
 */
export const PaymentProcessor = {
    Stripe: "stripe",
    Shopify: "shopify",
    Paddle: "paddle",
} as const;
/**
 * The payment processor via which the sale was made.
 */
export type PaymentProcessor = ClosedEnum<typeof PaymentProcessor>;

export type TrackSaleRequestBody = {
    /**
     * This is the unique identifier for the customer in the client's app. This is used to track the customer's journey.
     */
    customerId: string;
    /**
     * The amount of the sale. Should be passed in cents.
     */
    amount: number;
    /**
     * The payment processor via which the sale was made.
     */
    paymentProcessor: PaymentProcessor;
    /**
     * The invoice ID of the sale.
     */
    invoiceId?: string | null | undefined;
    /**
     * The currency of the sale. Accepts ISO 4217 currency codes.
     */
    currency?: string | undefined;
    /**
     * Additional metadata to be stored with the sale event.
     */
    metadata?: { [k: string]: any } | null | undefined;
};

/**
 * A sale was tracked.
 */
export type TrackSaleResponseBody = {
    customerId: string;
    amount: number;
    paymentProcessor: string;
    invoiceId: string | null;
    currency: string;
    metadata: { [k: string]: any } | null;
};

/** @internal */
export namespace TrackSaleGlobals$ {
    export const inboundSchema: z.ZodType<TrackSaleGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string(),
            projectSlug: z.string().optional(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
                ...(v.projectSlug === undefined ? null : { projectSlug: v.projectSlug }),
            };
        });

    export type Outbound = {
        workspaceId: string;
        projectSlug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TrackSaleGlobals> = z
        .object({
            workspaceId: z.string(),
            projectSlug: z.string().optional(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
                ...(v.projectSlug === undefined ? null : { projectSlug: v.projectSlug }),
            };
        });
}

/** @internal */
export namespace PaymentProcessor$ {
    export const inboundSchema = z.nativeEnum(PaymentProcessor);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TrackSaleRequestBody$ {
    export const inboundSchema: z.ZodType<TrackSaleRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            customerId: z.string(),
            amount: z.number().int(),
            paymentProcessor: PaymentProcessor$.inboundSchema,
            invoiceId: z.nullable(z.string()).default(null),
            currency: z.string().default("usd"),
            metadata: z.nullable(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return {
                customerId: v.customerId,
                amount: v.amount,
                paymentProcessor: v.paymentProcessor,
                invoiceId: v.invoiceId,
                currency: v.currency,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        customerId: string;
        amount: number;
        paymentProcessor: string;
        invoiceId: string | null;
        currency: string;
        metadata?: { [k: string]: any } | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TrackSaleRequestBody> = z
        .object({
            customerId: z.string(),
            amount: z.number().int(),
            paymentProcessor: PaymentProcessor$.outboundSchema,
            invoiceId: z.nullable(z.string()).default(null),
            currency: z.string().default("usd"),
            metadata: z.nullable(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return {
                customerId: v.customerId,
                amount: v.amount,
                paymentProcessor: v.paymentProcessor,
                invoiceId: v.invoiceId,
                currency: v.currency,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace TrackSaleResponseBody$ {
    export const inboundSchema: z.ZodType<TrackSaleResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            customerId: z.string(),
            amount: z.number(),
            paymentProcessor: z.string(),
            invoiceId: z.nullable(z.string()),
            currency: z.string(),
            metadata: z.nullable(z.record(z.any())),
        })
        .transform((v) => {
            return {
                customerId: v.customerId,
                amount: v.amount,
                paymentProcessor: v.paymentProcessor,
                invoiceId: v.invoiceId,
                currency: v.currency,
                metadata: v.metadata,
            };
        });

    export type Outbound = {
        customerId: string;
        amount: number;
        paymentProcessor: string;
        invoiceId: string | null;
        currency: string;
        metadata: { [k: string]: any } | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TrackSaleResponseBody> = z
        .object({
            customerId: z.string(),
            amount: z.number(),
            paymentProcessor: z.string(),
            invoiceId: z.nullable(z.string()),
            currency: z.string(),
            metadata: z.nullable(z.record(z.any())),
        })
        .transform((v) => {
            return {
                customerId: v.customerId,
                amount: v.amount,
                paymentProcessor: v.paymentProcessor,
                invoiceId: v.invoiceId,
                currency: v.currency,
                metadata: v.metadata,
            };
        });
}

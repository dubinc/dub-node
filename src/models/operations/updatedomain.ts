/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import * as z from "zod";

export type UpdateDomainGlobals = {
    workspaceId: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectSlug?: string | undefined;
};

/**
 * The type of redirect to use for this domain.
 */
export const UpdateDomainType = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;
/**
 * The type of redirect to use for this domain.
 */
export type UpdateDomainType = ClosedEnum<typeof UpdateDomainType>;

export type UpdateDomainRequestBody = {
    /**
     * Name of the domain.
     */
    slug?: string | undefined;
    /**
     * The type of redirect to use for this domain.
     */
    type?: UpdateDomainType | undefined;
    /**
     * The page your users will get redirected to when they visit your domain.
     */
    target?: string | null | undefined;
    /**
     * Redirect users to a specific URL when any link under this domain has expired.
     */
    expiredUrl?: string | null | undefined;
    /**
     * Whether to archive this domain. `false` will unarchive a previously archived domain.
     */
    archived?: boolean | undefined;
    /**
     * Prevent search engines from indexing the domain. Defaults to `false`.
     */
    noindex?: boolean | undefined;
    /**
     * Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened.
     */
    placeholder?: string | null | undefined;
};

export type UpdateDomainRequest = {
    /**
     * The domain name.
     */
    slug: string;
    requestBody?: UpdateDomainRequestBody | undefined;
};

/** @internal */
export namespace UpdateDomainGlobals$ {
    export const inboundSchema: z.ZodType<UpdateDomainGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string(),
        projectSlug: z.string().optional(),
    });

    export type Outbound = {
        workspaceId: string;
        projectSlug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateDomainGlobals> = z.object({
        workspaceId: z.string(),
        projectSlug: z.string().optional(),
    });
}

/** @internal */
export namespace UpdateDomainType$ {
    export const inboundSchema = z.nativeEnum(UpdateDomainType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateDomainRequestBody$ {
    export const inboundSchema: z.ZodType<UpdateDomainRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            slug: z.string().optional(),
            type: UpdateDomainType$.inboundSchema.default("redirect"),
            target: z.nullable(z.string()).optional(),
            expiredUrl: z.nullable(z.string()).optional(),
            archived: z.boolean().default(false),
            noindex: z.boolean().optional(),
            placeholder: z.nullable(z.string().default("https://dub.co/help/article/what-is-dub")),
        });

    export type Outbound = {
        slug?: string | undefined;
        type: string;
        target?: string | null | undefined;
        expiredUrl?: string | null | undefined;
        archived: boolean;
        noindex?: boolean | undefined;
        placeholder: string | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateDomainRequestBody> =
        z.object({
            slug: z.string().optional(),
            type: UpdateDomainType$.outboundSchema.default("redirect"),
            target: z.nullable(z.string()).optional(),
            expiredUrl: z.nullable(z.string()).optional(),
            archived: z.boolean().default(false),
            noindex: z.boolean().optional(),
            placeholder: z.nullable(z.string().default("https://dub.co/help/article/what-is-dub")),
        });
}

/** @internal */
export namespace UpdateDomainRequest$ {
    export const inboundSchema: z.ZodType<UpdateDomainRequest, z.ZodTypeDef, unknown> = z
        .object({
            slug: z.string(),
            RequestBody: z.lazy(() => UpdateDomainRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        slug: string;
        RequestBody?: UpdateDomainRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateDomainRequest> = z
        .object({
            slug: z.string(),
            requestBody: z.lazy(() => UpdateDomainRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

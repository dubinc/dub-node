/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type CreateTagGlobals = {
    workspaceId?: string | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectSlug?: string | undefined;
};

/**
 * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
 */
export const Color = {
    Red: "red",
    Yellow: "yellow",
    Green: "green",
    Blue: "blue",
    Purple: "purple",
    Pink: "pink",
    Brown: "brown",
} as const;
/**
 * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
 */
export type Color = ClosedEnum<typeof Color>;

export type CreateTagRequestBody = {
    /**
     * The name of the tag to create.
     */
    tag: string;
    /**
     * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
     */
    color?: Color | undefined;
};

/** @internal */
export namespace CreateTagGlobals$ {
    export const inboundSchema: z.ZodType<CreateTagGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string().optional(),
        projectSlug: z.string().optional(),
    });

    export type Outbound = {
        workspaceId?: string | undefined;
        projectSlug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTagGlobals> = z.object({
        workspaceId: z.string().optional(),
        projectSlug: z.string().optional(),
    });
}

/** @internal */
export namespace Color$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Color> = z.nativeEnum(Color);
    export const outboundSchema: z.ZodNativeEnum<typeof Color> = inboundSchema;
}

/** @internal */
export namespace CreateTagRequestBody$ {
    export const inboundSchema: z.ZodType<CreateTagRequestBody, z.ZodTypeDef, unknown> = z.object({
        tag: z.string(),
        color: Color$.inboundSchema.optional(),
    });

    export type Outbound = {
        tag: string;
        color?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTagRequestBody> = z.object(
        {
            tag: z.string(),
            color: Color$.outboundSchema.optional(),
        }
    );
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
 */
export const Color = {
    Red: "red",
    Yellow: "yellow",
    Green: "green",
    Blue: "blue",
    Purple: "purple",
    Pink: "pink",
    Brown: "brown",
} as const;
/**
 * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
 */
export type Color = (typeof Color)[keyof typeof Color];

export type CreateTagRequestBody = {
    /**
     * The name of the tag to create.
     */
    tag: string;
    /**
     * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
     */
    color?: Color | undefined;
};

export type CreateTagResponse =
    | components.BadRequest
    | components.Unauthorized
    | components.Forbidden
    | components.NotFound
    | components.Conflict
    | components.InviteExpired
    | components.UnprocessableEntity
    | components.RateLimitExceeded
    | components.InternalServerError
    | components.TagSchema;

/** @internal */
export const Color$: z.ZodNativeEnum<typeof Color> = z.nativeEnum(Color);

/** @internal */
export namespace CreateTagRequestBody$ {
    export type Inbound = {
        tag: string;
        color?: Color | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTagRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            tag: z.string(),
            color: Color$.optional(),
        })
        .transform((v) => {
            return {
                tag: v.tag,
                ...(v.color === undefined ? null : { color: v.color }),
            };
        });

    export type Outbound = {
        tag: string;
        color?: Color | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTagRequestBody> = z
        .object({
            tag: z.string(),
            color: Color$.optional(),
        })
        .transform((v) => {
            return {
                tag: v.tag,
                ...(v.color === undefined ? null : { color: v.color }),
            };
        });
}

/** @internal */
export namespace CreateTagResponse$ {
    export type Inbound =
        | components.BadRequest$.Inbound
        | components.Unauthorized$.Inbound
        | components.Forbidden$.Inbound
        | components.NotFound$.Inbound
        | components.Conflict$.Inbound
        | components.InviteExpired$.Inbound
        | components.UnprocessableEntity$.Inbound
        | components.RateLimitExceeded$.Inbound
        | components.InternalServerError$.Inbound
        | components.TagSchema$.Inbound;

    export type Outbound =
        | components.BadRequest$.Outbound
        | components.Unauthorized$.Outbound
        | components.Forbidden$.Outbound
        | components.NotFound$.Outbound
        | components.Conflict$.Outbound
        | components.InviteExpired$.Outbound
        | components.UnprocessableEntity$.Outbound
        | components.RateLimitExceeded$.Outbound
        | components.InternalServerError$.Outbound
        | components.TagSchema$.Outbound;
    export const inboundSchema: z.ZodType<CreateTagResponse, z.ZodTypeDef, Inbound> = z.union([
        components.BadRequest$.inboundSchema,
        components.Unauthorized$.inboundSchema,
        components.Forbidden$.inboundSchema,
        components.NotFound$.inboundSchema,
        components.Conflict$.inboundSchema,
        components.InviteExpired$.inboundSchema,
        components.UnprocessableEntity$.inboundSchema,
        components.RateLimitExceeded$.inboundSchema,
        components.InternalServerError$.inboundSchema,
        components.TagSchema$.inboundSchema,
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTagResponse> = z.union([
        components.BadRequest$.outboundSchema,
        components.Unauthorized$.outboundSchema,
        components.Forbidden$.outboundSchema,
        components.NotFound$.outboundSchema,
        components.Conflict$.outboundSchema,
        components.InviteExpired$.outboundSchema,
        components.UnprocessableEntity$.outboundSchema,
        components.RateLimitExceeded$.outboundSchema,
        components.InternalServerError$.outboundSchema,
        components.TagSchema$.outboundSchema,
    ]);
}

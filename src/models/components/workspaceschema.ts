/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The plan of the workspace.
 */
export const Plan = {
    Free: "free",
    Pro: "pro",
    Business: "business",
    BusinessPlus: "business plus",
    BusinessExtra: "business extra",
    BusinessMax: "business max",
    Enterprise: "enterprise",
} as const;
/**
 * The plan of the workspace.
 */
export type Plan = (typeof Plan)[keyof typeof Plan];

/**
 * The role of the authenticated user in the workspace.
 */
export const Role = {
    Owner: "owner",
    Member: "member",
} as const;
/**
 * The role of the authenticated user in the workspace.
 */
export type Role = (typeof Role)[keyof typeof Role];

export type Users = {
    /**
     * The role of the authenticated user in the workspace.
     */
    role: Role;
};

export type Domains = {
    /**
     * The domain name.
     */
    slug: string;
    /**
     * Whether the domain is the primary domain for the workspace.
     */
    primary?: boolean | undefined;
};

export type WorkspaceSchema = {
    /**
     * The unique ID of the workspace.
     */
    id: string;
    /**
     * The name of the workspace.
     */
    name: string;
    /**
     * The slug of the workspace.
     */
    slug: string;
    /**
     * The logo of the workspace.
     */
    logo?: string | null | undefined;
    /**
     * The usage of the workspace.
     */
    usage: number;
    /**
     * The usage limit of the workspace.
     */
    usageLimit: number;
    /**
     * The links usage of the workspace.
     */
    linksUsage: number;
    /**
     * The links limit of the workspace.
     */
    linksLimit: number;
    /**
     * The domains limit of the workspace.
     */
    domainsLimit: number;
    /**
     * The tags limit of the workspace.
     */
    tagsLimit: number;
    /**
     * The users limit of the workspace.
     */
    usersLimit: number;
    /**
     * The plan of the workspace.
     */
    plan: Plan;
    /**
     * The Stripe ID of the workspace.
     */
    stripeId: string | null;
    /**
     * The date and time when the billing cycle starts for the workspace.
     */
    billingCycleStart: number;
    /**
     * The date and time when the workspace was created.
     */
    createdAt: string;
    /**
     * The role of the authenticated user in the workspace.
     */
    users: Array<Users>;
    /**
     * The domains of the workspace.
     */
    domains: Array<Domains>;
    /**
     * The invite code of the workspace.
     */
    inviteCode: string | null;
};

/** @internal */
export const Plan$: z.ZodNativeEnum<typeof Plan> = z.nativeEnum(Plan);

/** @internal */
export const Role$: z.ZodNativeEnum<typeof Role> = z.nativeEnum(Role);

/** @internal */
export namespace Users$ {
    export type Inbound = {
        role: Role;
    };

    export const inboundSchema: z.ZodType<Users, z.ZodTypeDef, Inbound> = z
        .object({
            role: Role$,
        })
        .transform((v) => {
            return {
                role: v.role,
            };
        });

    export type Outbound = {
        role: Role;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Users> = z
        .object({
            role: Role$,
        })
        .transform((v) => {
            return {
                role: v.role,
            };
        });
}

/** @internal */
export namespace Domains$ {
    export type Inbound = {
        slug: string;
        primary?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Domains, z.ZodTypeDef, Inbound> = z
        .object({
            slug: z.string(),
            primary: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                primary: v.primary,
            };
        });

    export type Outbound = {
        slug: string;
        primary: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Domains> = z
        .object({
            slug: z.string(),
            primary: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                primary: v.primary,
            };
        });
}

/** @internal */
export namespace WorkspaceSchema$ {
    export type Inbound = {
        id: string;
        name: string;
        slug: string;
        logo?: string | null | undefined;
        usage: number;
        usageLimit: number;
        linksUsage: number;
        linksLimit: number;
        domainsLimit: number;
        tagsLimit: number;
        usersLimit: number;
        plan: Plan;
        stripeId: string | null;
        billingCycleStart: number;
        createdAt: string;
        users: Array<Users$.Inbound>;
        domains: Array<Domains$.Inbound>;
        inviteCode: string | null;
    };

    export const inboundSchema: z.ZodType<WorkspaceSchema, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            name: z.string(),
            slug: z.string(),
            logo: z.nullable(z.string()).default(null),
            usage: z.number(),
            usageLimit: z.number(),
            linksUsage: z.number(),
            linksLimit: z.number(),
            domainsLimit: z.number(),
            tagsLimit: z.number(),
            usersLimit: z.number(),
            plan: Plan$,
            stripeId: z.nullable(z.string()),
            billingCycleStart: z.number(),
            createdAt: z.string(),
            users: z.array(z.lazy(() => Users$.inboundSchema)),
            domains: z.array(z.lazy(() => Domains$.inboundSchema)),
            inviteCode: z.nullable(z.string()),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                slug: v.slug,
                logo: v.logo,
                usage: v.usage,
                usageLimit: v.usageLimit,
                linksUsage: v.linksUsage,
                linksLimit: v.linksLimit,
                domainsLimit: v.domainsLimit,
                tagsLimit: v.tagsLimit,
                usersLimit: v.usersLimit,
                plan: v.plan,
                stripeId: v.stripeId,
                billingCycleStart: v.billingCycleStart,
                createdAt: v.createdAt,
                users: v.users,
                domains: v.domains,
                inviteCode: v.inviteCode,
            };
        });

    export type Outbound = {
        id: string;
        name: string;
        slug: string;
        logo: string | null;
        usage: number;
        usageLimit: number;
        linksUsage: number;
        linksLimit: number;
        domainsLimit: number;
        tagsLimit: number;
        usersLimit: number;
        plan: Plan;
        stripeId: string | null;
        billingCycleStart: number;
        createdAt: string;
        users: Array<Users$.Outbound>;
        domains: Array<Domains$.Outbound>;
        inviteCode: string | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkspaceSchema> = z
        .object({
            id: z.string(),
            name: z.string(),
            slug: z.string(),
            logo: z.nullable(z.string()).default(null),
            usage: z.number(),
            usageLimit: z.number(),
            linksUsage: z.number(),
            linksLimit: z.number(),
            domainsLimit: z.number(),
            tagsLimit: z.number(),
            usersLimit: z.number(),
            plan: Plan$,
            stripeId: z.nullable(z.string()),
            billingCycleStart: z.number(),
            createdAt: z.string(),
            users: z.array(z.lazy(() => Users$.outboundSchema)),
            domains: z.array(z.lazy(() => Domains$.outboundSchema)),
            inviteCode: z.nullable(z.string()),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                slug: v.slug,
                logo: v.logo,
                usage: v.usage,
                usageLimit: v.usageLimit,
                linksUsage: v.linksUsage,
                linksLimit: v.linksLimit,
                domainsLimit: v.domainsLimit,
                tagsLimit: v.tagsLimit,
                usersLimit: v.usersLimit,
                plan: v.plan,
                stripeId: v.stripeId,
                billingCycleStart: v.billingCycleStart,
                createdAt: v.createdAt,
                users: v.users,
                domains: v.domains,
                inviteCode: v.inviteCode,
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

/**
 * The color of the tag.
 */
export const Color = {
    Red: "red",
    Yellow: "yellow",
    Green: "green",
    Blue: "blue",
    Purple: "purple",
    Pink: "pink",
    Brown: "brown",
} as const;
/**
 * The color of the tag.
 */
export type Color = ClosedEnum<typeof Color>;

export type TagSchema = {
    /**
     * The unique ID of the tag.
     */
    id: string;
    /**
     * The name of the tag.
     */
    name: string;
    /**
     * The color of the tag.
     */
    color: Color;
};

/** @internal */
export namespace Color$ {
    export const inboundSchema = z.nativeEnum(Color);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TagSchema$ {
    export const inboundSchema: z.ZodType<TagSchema, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        name: z.string(),
        color: Color$.inboundSchema,
    });

    export type Outbound = {
        id: string;
        name: string;
        color: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TagSchema> = z.object({
        id: z.string(),
        name: z.string(),
        color: Color$.outboundSchema,
    });
}

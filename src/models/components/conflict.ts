/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A short code indicating the error code returned.
 */
export const ConflictCode = {
    Conflict: "conflict",
} as const;
/**
 * A short code indicating the error code returned.
 */
export type ConflictCode = (typeof ConflictCode)[keyof typeof ConflictCode];

export type ConflictError = {
    /**
     * A short code indicating the error code returned.
     */
    code: ConflictCode;
    /**
     * A human readable explanation of what went wrong.
     */
    message: string;
    /**
     * A link to our documentation with more details about this error code
     */
    docUrl?: string | undefined;
};

export type Conflict = {
    error: ConflictError;
};

/** @internal */
export const ConflictCode$: z.ZodNativeEnum<typeof ConflictCode> = z.nativeEnum(ConflictCode);

/** @internal */
export namespace ConflictError$ {
    export type Inbound = {
        code: ConflictCode;
        message: string;
        doc_url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ConflictError, z.ZodTypeDef, Inbound> = z
        .object({
            code: ConflictCode$,
            message: z.string(),
            doc_url: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.doc_url === undefined ? null : { docUrl: v.doc_url }),
            };
        });

    export type Outbound = {
        code: ConflictCode;
        message: string;
        doc_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConflictError> = z
        .object({
            code: ConflictCode$,
            message: z.string(),
            docUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.docUrl === undefined ? null : { doc_url: v.docUrl }),
            };
        });
}

/** @internal */
export namespace Conflict$ {
    export type Inbound = {
        error: ConflictError$.Inbound;
    };

    export const inboundSchema: z.ZodType<Conflict, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.lazy(() => ConflictError$.inboundSchema),
        })
        .transform((v) => {
            return {
                error: v.error,
            };
        });

    export type Outbound = {
        error: ConflictError$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Conflict> = z
        .object({
            error: z.lazy(() => ConflictError$.outboundSchema),
        })
        .transform((v) => {
            return {
                error: v.error,
            };
        });
}

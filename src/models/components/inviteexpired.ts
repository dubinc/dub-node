/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A short code indicating the error code returned.
 */
export const InviteExpiredCode = {
    InviteExpired: "invite_expired",
} as const;
/**
 * A short code indicating the error code returned.
 */
export type InviteExpiredCode = (typeof InviteExpiredCode)[keyof typeof InviteExpiredCode];

export type InviteExpiredError = {
    /**
     * A short code indicating the error code returned.
     */
    code: InviteExpiredCode;
    /**
     * A human readable explanation of what went wrong.
     */
    message: string;
    /**
     * A link to our documentation with more details about this error code
     */
    docUrl?: string | undefined;
};

export type InviteExpired = {
    error: InviteExpiredError;
};

/** @internal */
export const InviteExpiredCode$: z.ZodNativeEnum<typeof InviteExpiredCode> =
    z.nativeEnum(InviteExpiredCode);

/** @internal */
export namespace InviteExpiredError$ {
    export type Inbound = {
        code: InviteExpiredCode;
        message: string;
        doc_url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<InviteExpiredError, z.ZodTypeDef, Inbound> = z
        .object({
            code: InviteExpiredCode$,
            message: z.string(),
            doc_url: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.doc_url === undefined ? null : { docUrl: v.doc_url }),
            };
        });

    export type Outbound = {
        code: InviteExpiredCode;
        message: string;
        doc_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteExpiredError> = z
        .object({
            code: InviteExpiredCode$,
            message: z.string(),
            docUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.docUrl === undefined ? null : { doc_url: v.docUrl }),
            };
        });
}

/** @internal */
export namespace InviteExpired$ {
    export type Inbound = {
        error: InviteExpiredError$.Inbound;
    };

    export const inboundSchema: z.ZodType<InviteExpired, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.lazy(() => InviteExpiredError$.inboundSchema),
        })
        .transform((v) => {
            return {
                error: v.error,
            };
        });

    export type Outbound = {
        error: InviteExpiredError$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteExpired> = z
        .object({
            error: z.lazy(() => InviteExpiredError$.outboundSchema),
        })
        .transform((v) => {
            return {
                error: v.error,
            };
        });
}

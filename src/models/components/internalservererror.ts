/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A short code indicating the error code returned.
 */
export const InternalServerErrorCode = {
    InternalServerError: "internal_server_error",
} as const;
/**
 * A short code indicating the error code returned.
 */
export type InternalServerErrorCode =
    (typeof InternalServerErrorCode)[keyof typeof InternalServerErrorCode];

export type InternalServerErrorError = {
    /**
     * A short code indicating the error code returned.
     */
    code: InternalServerErrorCode;
    /**
     * A human readable explanation of what went wrong.
     */
    message: string;
    /**
     * A link to our documentation with more details about this error code
     */
    docUrl?: string | undefined;
};

export type InternalServerError = {
    error: InternalServerErrorError;
};

/** @internal */
export const InternalServerErrorCode$: z.ZodNativeEnum<typeof InternalServerErrorCode> =
    z.nativeEnum(InternalServerErrorCode);

/** @internal */
export namespace InternalServerErrorError$ {
    export type Inbound = {
        code: InternalServerErrorCode;
        message: string;
        doc_url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<InternalServerErrorError, z.ZodTypeDef, Inbound> = z
        .object({
            code: InternalServerErrorCode$,
            message: z.string(),
            doc_url: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.doc_url === undefined ? null : { docUrl: v.doc_url }),
            };
        });

    export type Outbound = {
        code: InternalServerErrorCode;
        message: string;
        doc_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InternalServerErrorError> = z
        .object({
            code: InternalServerErrorCode$,
            message: z.string(),
            docUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.docUrl === undefined ? null : { doc_url: v.docUrl }),
            };
        });
}

/** @internal */
export namespace InternalServerError$ {
    export type Inbound = {
        error: InternalServerErrorError$.Inbound;
    };

    export const inboundSchema: z.ZodType<InternalServerError, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.lazy(() => InternalServerErrorError$.inboundSchema),
        })
        .transform((v) => {
            return {
                error: v.error,
            };
        });

    export type Outbound = {
        error: InternalServerErrorError$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InternalServerError> = z
        .object({
            error: z.lazy(() => InternalServerErrorError$.outboundSchema),
        })
        .transform((v) => {
            return {
                error: v.error,
            };
        });
}

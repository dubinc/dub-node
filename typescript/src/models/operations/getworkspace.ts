/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetWorkspaceRequest = {
    /**
     * The ID or slug of the workspace.
     */
    idOrSlug: string;
};

export type GetWorkspaceResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The retrieved workspace
     */
    workspaceSchema?: components.WorkspaceSchema | undefined;
};

/** @internal */
export namespace GetWorkspaceRequest$ {
    export type Inbound = {
        idOrSlug: string;
    };

    export const inboundSchema: z.ZodType<GetWorkspaceRequest, z.ZodTypeDef, Inbound> = z
        .object({
            idOrSlug: z.string(),
        })
        .transform((v) => {
            return {
                idOrSlug: v.idOrSlug,
            };
        });

    export type Outbound = {
        idOrSlug: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWorkspaceRequest> = z
        .object({
            idOrSlug: z.string(),
        })
        .transform((v) => {
            return {
                idOrSlug: v.idOrSlug,
            };
        });
}

/** @internal */
export namespace GetWorkspaceResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        WorkspaceSchema?: components.WorkspaceSchema$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetWorkspaceResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            WorkspaceSchema: components.WorkspaceSchema$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.WorkspaceSchema === undefined
                    ? null
                    : { workspaceSchema: v.WorkspaceSchema }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        WorkspaceSchema?: components.WorkspaceSchema$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWorkspaceResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            workspaceSchema: components.WorkspaceSchema$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.workspaceSchema === undefined
                    ? null
                    : { WorkspaceSchema: v.workspaceSchema }),
            };
        });
}

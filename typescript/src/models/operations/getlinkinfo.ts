/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetLinkInfoRequest = {
    /**
     * The ID of the workspace the link belongs to.
     */
    workspaceId: string;
    /**
     * The domain of the link to retrieve. E.g. for `d.to/github`, the domain is `d.to`.
     */
    domain: string;
    /**
     * The key of the link to retrieve. E.g. for `d.to/github`, the key is `github`.
     */
    key: string;
};

export type GetLinkInfoResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The retrieved link
     */
    linkSchema?: components.LinkSchema | undefined;
};

/** @internal */
export namespace GetLinkInfoRequest$ {
    export type Inbound = {
        workspaceId: string;
        domain: string;
        key: string;
    };

    export const inboundSchema: z.ZodType<GetLinkInfoRequest, z.ZodTypeDef, Inbound> = z
        .object({
            workspaceId: z.string(),
            domain: z.string(),
            key: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
                domain: v.domain,
                key: v.key,
            };
        });

    export type Outbound = {
        workspaceId: string;
        domain: string;
        key: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLinkInfoRequest> = z
        .object({
            workspaceId: z.string(),
            domain: z.string(),
            key: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
                domain: v.domain,
                key: v.key,
            };
        });
}

/** @internal */
export namespace GetLinkInfoResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        LinkSchema?: components.LinkSchema$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetLinkInfoResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            LinkSchema: components.LinkSchema$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.LinkSchema === undefined ? null : { linkSchema: v.LinkSchema }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        LinkSchema?: components.LinkSchema$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLinkInfoResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            linkSchema: components.LinkSchema$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.linkSchema === undefined ? null : { LinkSchema: v.linkSchema }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The level of error correction to use for the QR code. Defaults to `L` if not provided.
 */
export enum Level {
    L = "L",
    M = "M",
    Q = "Q",
    H = "H",
}

export type GetQRCodeRequest = {
    /**
     * The URL to generate a QR code for. Defaults to `https://dub.co` if not provided.
     */
    url?: string | undefined;
    /**
     * The size of the QR code in pixels. Defaults to `600` if not provided.
     */
    size?: number | undefined;
    /**
     * The level of error correction to use for the QR code. Defaults to `L` if not provided.
     */
    level?: Level | undefined;
    /**
     * The foreground color of the QR code in hex format. Defaults to `#000000` if not provided.
     */
    fgColor?: string | undefined;
    /**
     * The background color of the QR code in hex format. Defaults to `#ffffff` if not provided.
     */
    bgColor?: string | undefined;
    /**
     * Whether to include a margin around the QR code. Defaults to `false` if not provided.
     */
    includeMargin?: boolean | undefined;
};

export type GetQRCodeResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The QR code
     */
    res?: string | undefined;
};

/** @internal */
export const Level$ = z.nativeEnum(Level);

/** @internal */
export namespace GetQRCodeRequest$ {
    export type Inbound = {
        url?: string | undefined;
        size?: number | undefined;
        level?: Level | undefined;
        fgColor?: string | undefined;
        bgColor?: string | undefined;
        includeMargin?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetQRCodeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().default("https://dub.co"),
            size: z.number().default(600),
            level: Level$.default(Level.L),
            fgColor: z.string().default("#000000"),
            bgColor: z.string().default("#FFFFFF"),
            includeMargin: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                url: v.url,
                size: v.size,
                level: v.level,
                fgColor: v.fgColor,
                bgColor: v.bgColor,
                includeMargin: v.includeMargin,
            };
        });

    export type Outbound = {
        url: string;
        size: number;
        level: Level;
        fgColor: string;
        bgColor: string;
        includeMargin: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetQRCodeRequest> = z
        .object({
            url: z.string().default("https://dub.co"),
            size: z.number().default(600),
            level: Level$.default(Level.L),
            fgColor: z.string().default("#000000"),
            bgColor: z.string().default("#FFFFFF"),
            includeMargin: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                url: v.url,
                size: v.size,
                level: v.level,
                fgColor: v.fgColor,
                bgColor: v.bgColor,
                includeMargin: v.includeMargin,
            };
        });
}

/** @internal */
export namespace GetQRCodeResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        res?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetQRCodeResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            res: z.string().optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        res?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetQRCodeResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            res: z.string().optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}

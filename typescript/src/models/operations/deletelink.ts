/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type DeleteLinkRequest = {
    /**
     * The id of the link to delete. You can get this via the `getLinkInfo` endpoint.
     */
    linkId: string;
    /**
     * The ID of the workspace the link belongs to.
     */
    workspaceId: string;
};

export type DeleteLinkResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The deleted link
     */
    linkSchema?: components.LinkSchema | undefined;
};

/** @internal */
export namespace DeleteLinkRequest$ {
    export type Inbound = {
        linkId: string;
        workspaceId: string;
    };

    export const inboundSchema: z.ZodType<DeleteLinkRequest, z.ZodTypeDef, Inbound> = z
        .object({
            linkId: z.string(),
            workspaceId: z.string(),
        })
        .transform((v) => {
            return {
                linkId: v.linkId,
                workspaceId: v.workspaceId,
            };
        });

    export type Outbound = {
        linkId: string;
        workspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteLinkRequest> = z
        .object({
            linkId: z.string(),
            workspaceId: z.string(),
        })
        .transform((v) => {
            return {
                linkId: v.linkId,
                workspaceId: v.workspaceId,
            };
        });
}

/** @internal */
export namespace DeleteLinkResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        LinkSchema?: components.LinkSchema$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteLinkResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            LinkSchema: components.LinkSchema$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.LinkSchema === undefined ? null : { linkSchema: v.LinkSchema }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        LinkSchema?: components.LinkSchema$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteLinkResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            linkSchema: components.LinkSchema$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.linkSchema === undefined ? null : { LinkSchema: v.linkSchema }),
            };
        });
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetTagsRequest = {
    /**
     * The ID of the workspace to retrieve the tags for.
     */
    workspaceId: string;
};

export type GetTagsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of tags
     */
    tagSchemas?: Array<components.TagSchema> | undefined;
};

/** @internal */
export namespace GetTagsRequest$ {
    export type Inbound = {
        workspaceId: string;
    };

    export const inboundSchema: z.ZodType<GetTagsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            workspaceId: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
            };
        });

    export type Outbound = {
        workspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTagsRequest> = z
        .object({
            workspaceId: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
            };
        });
}

/** @internal */
export namespace GetTagsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        TagSchemas?: Array<components.TagSchema$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetTagsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            TagSchemas: z.array(components.TagSchema$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.TagSchemas === undefined ? null : { tagSchemas: v.TagSchemas }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        TagSchemas?: Array<components.TagSchema$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTagsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            tagSchemas: z.array(components.TagSchema$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.tagSchemas === undefined ? null : { TagSchemas: v.tagSchemas }),
            };
        });
}
